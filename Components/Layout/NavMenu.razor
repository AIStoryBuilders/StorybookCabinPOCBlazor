@implements IDisposable
@using System.Security.Claims
@using System.IO
@using System.Text
@using System.Web
@using System.Drawing
@using StorybookCabinPOCBlazor.Models
@inherits OwningComponentBase<StorybookCabinPOCBlazorService>
@rendermode InteractiveServer
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment HostEnvironment
@inject IHttpContextAccessor httpContextAccessor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">AIStoryBuilders</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="game">
                Game
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="gametest">
                Game Test
            </NavLink>
        </div>
        @if (UserIsAnAdmin)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="usermanager">
                    User Admin
                </NavLink>
            </div>
        }
        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/MicrosoftIdentity/Account/SignOut">
                        Sign out
                    </NavLink>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/MicrosoftIdentity/Account/SignIn">
                        Sign in
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    bool UserIsAnAdmin = false;
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;

        if (user.Identity != null)
        {
            if (user.Identity.IsAuthenticated)
            {
                try
                {
                    var Objectidentifier =
                    user.Claims.FirstOrDefault(
                    c => c.Type ==
                    "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?
                    .Value;

                    var User = await Service.GetUserFromObjectidentifierAsync(Objectidentifier);

                    UserIsAnAdmin = User.IsSuperUser;
                }
                catch
                {

                }
            }
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}